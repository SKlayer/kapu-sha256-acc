

================================================================
== Vivado HLS Report for 'sha256_update'
================================================================
* Date:           Mon Jan 28 14:26:55 2019

* Version:        2017.4 (Build 2086221 on Fri Dec 15 21:13:33 MST 2017)
* Project:        sha256_acc2
* Solution:       acc256
* Product family: zynq
* Target device:  xc7z020clg400-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|      7.63|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-------+-----+-------+---------+
    |   Latency   |   Interval  | Pipeline|
    | min |  max  | min |  max  |   Type  |
    +-----+-------+-----+-------+---------+
    |    1|  28097|    1|  28097|   none  |
    +-----+-------+-----+-------+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +----------+-----+-------+----------+-----------+-----------+--------+----------+
        |          |   Latency   | Iteration|  Initiation Interval  |  Trip  |          |
        | Loop Name| min |  max  |  Latency |  achieved |   target  |  Count | Pipelined|
        +----------+-----+-------+----------+-----------+-----------+--------+----------+
        |- Loop 1  |    0|  28096|  3 ~ 439 |          -|          -| 0 ~ 64 |    no    |
        +----------+-----+-------+----------+-----------+-----------+--------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 5
* Pipeline : 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / (!exitcond)
3 --> 
	4  / (tmp_3)
	5  / (!tmp_3)
4 --> 
	5  / true
5 --> 
	2  / true

* FSM state operations: 

 <State 1> : 1.81ns
ST_1 : Operation 6 [1/1] (0.00ns)   --->   "%ctx_datalen = alloca i32"
ST_1 : Operation 7 [1/1] (0.00ns)   --->   "%ctx_state_7 = alloca i32"
ST_1 : Operation 8 [1/1] (0.00ns)   --->   "%ctx_state_6 = alloca i32"
ST_1 : Operation 9 [1/1] (0.00ns)   --->   "%ctx_state_5 = alloca i32"
ST_1 : Operation 10 [1/1] (0.00ns)   --->   "%ctx_state_4 = alloca i32"
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "%ctx_state_3 = alloca i32"
ST_1 : Operation 12 [1/1] (0.00ns)   --->   "%ctx_state_2 = alloca i32"
ST_1 : Operation 13 [1/1] (0.00ns)   --->   "%ctx_state_1 = alloca i32"
ST_1 : Operation 14 [1/1] (0.00ns)   --->   "%ctx_state = alloca i32"
ST_1 : Operation 15 [1/1] (0.00ns)   --->   "%ctx_bitlen_1 = alloca i32"
ST_1 : Operation 16 [1/1] (0.00ns)   --->   "%ctx_bitlen = alloca i32"
ST_1 : Operation 17 [1/1] (0.00ns)   --->   "%len_read = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %len)"
ST_1 : Operation 18 [1/1] (0.00ns)   --->   "%p_read = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %p_read10)"
ST_1 : Operation 19 [1/1] (0.00ns)   --->   "%p_read_1 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %p_read9)"
ST_1 : Operation 20 [1/1] (0.00ns)   --->   "%p_read_2 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %p_read8)"
ST_1 : Operation 21 [1/1] (0.00ns)   --->   "%p_read_3 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %p_read7)"
ST_1 : Operation 22 [1/1] (0.00ns)   --->   "%p_read_4 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %p_read6)"
ST_1 : Operation 23 [1/1] (0.00ns)   --->   "%p_read_5 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %p_read5)"
ST_1 : Operation 24 [1/1] (0.00ns)   --->   "%p_read45 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %p_read4)"
ST_1 : Operation 25 [1/1] (0.00ns)   --->   "%p_read34 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %p_read3)"
ST_1 : Operation 26 [1/1] (0.00ns)   --->   "%p_read23 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %p_read2)"
ST_1 : Operation 27 [1/1] (0.00ns)   --->   "%p_read12 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %p_read1)"
ST_1 : Operation 28 [1/1] (0.00ns)   --->   "%ctx_datalen_read_1 = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %ctx_datalen_read)"
ST_1 : Operation 29 [1/1] (0.00ns)   --->   "%tmp_7 = trunc i32 %len_read to i8" [sha256_impl.c:90]
ST_1 : Operation 30 [1/1] (1.76ns)   --->   "store i32 %p_read12, i32* %ctx_bitlen"
ST_1 : Operation 31 [1/1] (1.76ns)   --->   "store i32 %p_read23, i32* %ctx_bitlen_1"
ST_1 : Operation 32 [1/1] (1.76ns)   --->   "store i32 %p_read34, i32* %ctx_state"
ST_1 : Operation 33 [1/1] (1.76ns)   --->   "store i32 %p_read45, i32* %ctx_state_1"
ST_1 : Operation 34 [1/1] (1.76ns)   --->   "store i32 %p_read_5, i32* %ctx_state_2"
ST_1 : Operation 35 [1/1] (1.76ns)   --->   "store i32 %p_read_4, i32* %ctx_state_3"
ST_1 : Operation 36 [1/1] (1.76ns)   --->   "store i32 %p_read_3, i32* %ctx_state_4"
ST_1 : Operation 37 [1/1] (1.76ns)   --->   "store i32 %p_read_2, i32* %ctx_state_5"
ST_1 : Operation 38 [1/1] (1.76ns)   --->   "store i32 %p_read_1, i32* %ctx_state_6"
ST_1 : Operation 39 [1/1] (1.76ns)   --->   "store i32 %p_read, i32* %ctx_state_7"
ST_1 : Operation 40 [1/1] (1.81ns)   --->   "store i32 %ctx_datalen_read_1, i32* %ctx_datalen" [sha256_impl.c:86]
ST_1 : Operation 41 [1/1] (1.76ns)   --->   "br label %._crit_edge" [sha256_impl.c:90]

 <State 2> : 2.32ns
ST_2 : Operation 42 [1/1] (0.00ns)   --->   "%i = phi i7 [ 0, %0 ], [ %i_1, %._crit_edge.backedge ]"
ST_2 : Operation 43 [1/1] (0.00ns)   --->   "%i_cast = zext i7 %i to i8" [sha256_impl.c:90]
ST_2 : Operation 44 [1/1] (1.55ns)   --->   "%exitcond = icmp eq i8 %i_cast, %tmp_7" [sha256_impl.c:90]   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 2.47> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 45 [1/1] (0.00ns)   --->   "%empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 0, i64 64, i64 0)"
ST_2 : Operation 46 [1/1] (1.87ns)   --->   "%i_1 = add i7 %i, 1" [sha256_impl.c:90]   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 47 [1/1] (0.00ns)   --->   "br i1 %exitcond, label %2, label %1" [sha256_impl.c:90]
ST_2 : Operation 48 [1/1] (0.00ns)   --->   "%tmp = zext i7 %i to i64" [sha256_impl.c:91]
ST_2 : Operation 49 [1/1] (0.00ns)   --->   "%data_addr = getelementptr [64 x i8]* %data, i64 0, i64 %tmp" [sha256_impl.c:91]
ST_2 : Operation 50 [2/2] (2.32ns)   --->   "%data_load = load i8* %data_addr, align 1" [sha256_impl.c:91]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 64> <RAM>
ST_2 : Operation 51 [1/1] (0.00ns)   --->   "%ctx_datalen_load_1 = load i32* %ctx_datalen" [sha256_impl.c:99]
ST_2 : Operation 52 [1/1] (0.00ns)   --->   "%ctx_state_7_load = load i32* %ctx_state_7" [sha256_impl.c:99]
ST_2 : Operation 53 [1/1] (0.00ns)   --->   "%ctx_state_6_load = load i32* %ctx_state_6" [sha256_impl.c:99]
ST_2 : Operation 54 [1/1] (0.00ns)   --->   "%ctx_state_5_load = load i32* %ctx_state_5" [sha256_impl.c:99]
ST_2 : Operation 55 [1/1] (0.00ns)   --->   "%ctx_state_4_load = load i32* %ctx_state_4" [sha256_impl.c:99]
ST_2 : Operation 56 [1/1] (0.00ns)   --->   "%ctx_state_3_load = load i32* %ctx_state_3" [sha256_impl.c:99]
ST_2 : Operation 57 [1/1] (0.00ns)   --->   "%ctx_state_2_load = load i32* %ctx_state_2" [sha256_impl.c:99]
ST_2 : Operation 58 [1/1] (0.00ns)   --->   "%ctx_state_1_load = load i32* %ctx_state_1" [sha256_impl.c:99]
ST_2 : Operation 59 [1/1] (0.00ns)   --->   "%ctx_state_load = load i32* %ctx_state" [sha256_impl.c:99]
ST_2 : Operation 60 [1/1] (0.00ns)   --->   "%ctx_bitlen_1_load_1 = load i32* %ctx_bitlen_1" [sha256_impl.c:99]
ST_2 : Operation 61 [1/1] (0.00ns)   --->   "%ctx_bitlen_load_1 = load i32* %ctx_bitlen" [sha256_impl.c:99]
ST_2 : Operation 62 [1/1] (0.00ns)   --->   "%mrv_s = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } undef, i32 %ctx_datalen_load_1, 0" [sha256_impl.c:99]
ST_2 : Operation 63 [1/1] (0.00ns)   --->   "%mrv_1 = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %mrv_s, i32 %ctx_bitlen_load_1, 1" [sha256_impl.c:99]
ST_2 : Operation 64 [1/1] (0.00ns)   --->   "%mrv_2 = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %mrv_1, i32 %ctx_bitlen_1_load_1, 2" [sha256_impl.c:99]
ST_2 : Operation 65 [1/1] (0.00ns)   --->   "%mrv_3 = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %mrv_2, i32 %ctx_state_load, 3" [sha256_impl.c:99]
ST_2 : Operation 66 [1/1] (0.00ns)   --->   "%mrv_4 = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %mrv_3, i32 %ctx_state_1_load, 4" [sha256_impl.c:99]
ST_2 : Operation 67 [1/1] (0.00ns)   --->   "%mrv_5 = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %mrv_4, i32 %ctx_state_2_load, 5" [sha256_impl.c:99]
ST_2 : Operation 68 [1/1] (0.00ns)   --->   "%mrv_6 = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %mrv_5, i32 %ctx_state_3_load, 6" [sha256_impl.c:99]
ST_2 : Operation 69 [1/1] (0.00ns)   --->   "%mrv_7 = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %mrv_6, i32 %ctx_state_4_load, 7" [sha256_impl.c:99]
ST_2 : Operation 70 [1/1] (0.00ns)   --->   "%mrv_8 = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %mrv_7, i32 %ctx_state_5_load, 8" [sha256_impl.c:99]
ST_2 : Operation 71 [1/1] (0.00ns)   --->   "%mrv_9 = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %mrv_8, i32 %ctx_state_6_load, 9" [sha256_impl.c:99]
ST_2 : Operation 72 [1/1] (0.00ns)   --->   "%mrv_10 = insertvalue { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %mrv_9, i32 %ctx_state_7_load, 10" [sha256_impl.c:99]
ST_2 : Operation 73 [1/1] (0.00ns)   --->   "ret { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 } %mrv_10" [sha256_impl.c:99]

 <State 3> : 5.03ns
ST_3 : Operation 74 [1/1] (0.00ns)   --->   "%ctx_datalen_load = load i32* %ctx_datalen" [sha256_impl.c:92]
ST_3 : Operation 75 [1/2] (2.32ns)   --->   "%data_load = load i8* %data_addr, align 1" [sha256_impl.c:91]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 64> <RAM>
ST_3 : Operation 76 [1/1] (0.00ns)   --->   "%tmp_1 = zext i32 %ctx_datalen_load to i64" [sha256_impl.c:91]
ST_3 : Operation 77 [1/1] (0.00ns)   --->   "%ctx_data_addr = getelementptr [64 x i8]* %ctx_data, i64 0, i64 %tmp_1" [sha256_impl.c:91]
ST_3 : Operation 78 [1/1] (2.32ns)   --->   "store i8 %data_load, i8* %ctx_data_addr, align 1" [sha256_impl.c:91]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 64> <RAM>
ST_3 : Operation 79 [1/1] (2.55ns)   --->   "%tmp_2 = add i32 %ctx_datalen_load, 1" [sha256_impl.c:92]   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 80 [1/1] (2.47ns)   --->   "%tmp_3 = icmp eq i32 %tmp_2, 64" [sha256_impl.c:93]   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 2.47> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 81 [1/1] (0.00ns)   --->   "br i1 %tmp_3, label %._crit_edge1, label %._crit_edge.backedge.pre" [sha256_impl.c:93]
ST_3 : Operation 82 [1/1] (1.81ns)   --->   "store i32 %tmp_2, i32* %ctx_datalen" [sha256_impl.c:92]
ST_3 : Operation 83 [1/1] (0.00ns)   --->   "br label %._crit_edge.backedge"

 <State 4> : 1.81ns
ST_4 : Operation 84 [1/1] (0.00ns)   --->   "%ctx_state_7_load_1 = load i32* %ctx_state_7" [sha256_impl.c:94]
ST_4 : Operation 85 [1/1] (0.00ns)   --->   "%ctx_state_6_load_1 = load i32* %ctx_state_6" [sha256_impl.c:94]
ST_4 : Operation 86 [1/1] (0.00ns)   --->   "%ctx_state_5_load_1 = load i32* %ctx_state_5" [sha256_impl.c:94]
ST_4 : Operation 87 [1/1] (0.00ns)   --->   "%ctx_state_4_load_1 = load i32* %ctx_state_4" [sha256_impl.c:94]
ST_4 : Operation 88 [1/1] (0.00ns)   --->   "%ctx_state_3_load_1 = load i32* %ctx_state_3" [sha256_impl.c:94]
ST_4 : Operation 89 [1/1] (0.00ns)   --->   "%ctx_state_2_load_1 = load i32* %ctx_state_2" [sha256_impl.c:94]
ST_4 : Operation 90 [1/1] (0.00ns)   --->   "%ctx_state_1_load_1 = load i32* %ctx_state_1" [sha256_impl.c:94]
ST_4 : Operation 91 [1/1] (0.00ns)   --->   "%ctx_state_load_1 = load i32* %ctx_state" [sha256_impl.c:94]
ST_4 : Operation 92 [2/2] (0.00ns)   --->   "%call_ret = call fastcc { i32, i32, i32, i32, i32, i32, i32, i32 } @sha256_transform(i32 %ctx_state_load_1, i32 %ctx_state_1_load_1, i32 %ctx_state_2_load_1, i32 %ctx_state_3_load_1, i32 %ctx_state_4_load_1, i32 %ctx_state_5_load_1, i32 %ctx_state_6_load_1, i32 %ctx_state_7_load_1, [64 x i8]* %ctx_data)" [sha256_impl.c:94]   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_4 : Operation 93 [1/1] (1.81ns)   --->   "store i32 0, i32* %ctx_datalen"

 <State 5> : 5.69ns
ST_5 : Operation 94 [1/1] (0.00ns)   --->   "%ctx_bitlen_1_load = load i32* %ctx_bitlen_1" [sha256_impl.c:95]
ST_5 : Operation 95 [1/1] (0.00ns)   --->   "%ctx_bitlen_load = load i32* %ctx_bitlen" [sha256_impl.c:95]
ST_5 : Operation 96 [1/2] (2.55ns)   --->   "%call_ret = call fastcc { i32, i32, i32, i32, i32, i32, i32, i32 } @sha256_transform(i32 %ctx_state_load_1, i32 %ctx_state_1_load_1, i32 %ctx_state_2_load_1, i32 %ctx_state_3_load_1, i32 %ctx_state_4_load_1, i32 %ctx_state_5_load_1, i32 %ctx_state_6_load_1, i32 %ctx_state_7_load_1, [64 x i8]* %ctx_data)" [sha256_impl.c:94]   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_5 : Operation 97 [1/1] (0.00ns)   --->   "%ctx_state_0_ret = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 0" [sha256_impl.c:94]
ST_5 : Operation 98 [1/1] (0.00ns)   --->   "%ctx_state_1_ret = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 1" [sha256_impl.c:94]
ST_5 : Operation 99 [1/1] (0.00ns)   --->   "%ctx_state_2_ret = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 2" [sha256_impl.c:94]
ST_5 : Operation 100 [1/1] (0.00ns)   --->   "%ctx_state_3_ret = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 3" [sha256_impl.c:94]
ST_5 : Operation 101 [1/1] (0.00ns)   --->   "%ctx_state_4_ret = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 4" [sha256_impl.c:94]
ST_5 : Operation 102 [1/1] (0.00ns)   --->   "%ctx_state_5_ret = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 5" [sha256_impl.c:94]
ST_5 : Operation 103 [1/1] (0.00ns)   --->   "%ctx_state_6_ret = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 6" [sha256_impl.c:94]
ST_5 : Operation 104 [1/1] (0.00ns)   --->   "%ctx_state_7_ret = extractvalue { i32, i32, i32, i32, i32, i32, i32, i32 } %call_ret, 7" [sha256_impl.c:94]
ST_5 : Operation 105 [1/1] (2.47ns)   --->   "%tmp_4 = icmp ugt i32 %ctx_bitlen_load, -513" [sha256_impl.c:95]   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 2.47> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 106 [1/1] (2.55ns)   --->   "%tmp_5 = add i32 %ctx_bitlen_1_load, 1" [sha256_impl.c:95]   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 107 [1/1] (1.37ns)   --->   "%tmp_5_ctx_bitlen_1 = select i1 %tmp_4, i32 %tmp_5, i32 %ctx_bitlen_1_load" [sha256_impl.c:95]   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 1.37> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_5 : Operation 108 [1/1] (2.55ns)   --->   "%tmp_6 = add i32 %ctx_bitlen_load, 512" [sha256_impl.c:95]   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 109 [1/1] (1.76ns)   --->   "store i32 %tmp_6, i32* %ctx_bitlen" [sha256_impl.c:95]
ST_5 : Operation 110 [1/1] (1.76ns)   --->   "store i32 %tmp_5_ctx_bitlen_1, i32* %ctx_bitlen_1" [sha256_impl.c:95]
ST_5 : Operation 111 [1/1] (1.76ns)   --->   "store i32 %ctx_state_0_ret, i32* %ctx_state" [sha256_impl.c:94]
ST_5 : Operation 112 [1/1] (1.76ns)   --->   "store i32 %ctx_state_1_ret, i32* %ctx_state_1" [sha256_impl.c:94]
ST_5 : Operation 113 [1/1] (1.76ns)   --->   "store i32 %ctx_state_2_ret, i32* %ctx_state_2" [sha256_impl.c:94]
ST_5 : Operation 114 [1/1] (1.76ns)   --->   "store i32 %ctx_state_3_ret, i32* %ctx_state_3" [sha256_impl.c:94]
ST_5 : Operation 115 [1/1] (1.76ns)   --->   "store i32 %ctx_state_4_ret, i32* %ctx_state_4" [sha256_impl.c:94]
ST_5 : Operation 116 [1/1] (1.76ns)   --->   "store i32 %ctx_state_5_ret, i32* %ctx_state_5" [sha256_impl.c:94]
ST_5 : Operation 117 [1/1] (1.76ns)   --->   "store i32 %ctx_state_6_ret, i32* %ctx_state_6" [sha256_impl.c:94]
ST_5 : Operation 118 [1/1] (1.76ns)   --->   "store i32 %ctx_state_7_ret, i32* %ctx_state_7" [sha256_impl.c:94]
ST_5 : Operation 119 [1/1] (0.00ns)   --->   "br label %._crit_edge.backedge" [sha256_impl.c:97]
ST_5 : Operation 120 [1/1] (0.00ns)   --->   "br label %._crit_edge"


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 <State 1>: 1.81ns
The critical path consists of the following:
	'alloca' operation ('ctx.datalen') [16]  (0 ns)
	'store' operation (sha256_impl.c:86) of variable 'ctx.datalen' on local variable 'ctx.datalen' [50]  (1.81 ns)

 <State 2>: 2.32ns
The critical path consists of the following:
	'phi' operation ('i') with incoming values : ('i', sha256_impl.c:90) [53]  (0 ns)
	'getelementptr' operation ('data_addr', sha256_impl.c:91) [62]  (0 ns)
	'load' operation ('data_load', sha256_impl.c:91) on array 'data' [63]  (2.32 ns)

 <State 3>: 5.03ns
The critical path consists of the following:
	'load' operation ('ctx_datalen_load', sha256_impl.c:92) on local variable 'ctx.datalen' [60]  (0 ns)
	'add' operation ('tmp_2', sha256_impl.c:92) [67]  (2.55 ns)
	'icmp' operation ('tmp_3', sha256_impl.c:93) [68]  (2.47 ns)

 <State 4>: 1.81ns
The critical path consists of the following:
	'store' operation of constant 0 on local variable 'ctx.datalen' [107]  (1.81 ns)

 <State 5>: 5.69ns
The critical path consists of the following:
	'load' operation ('ctx_bitlen_1_load', sha256_impl.c:95) on local variable 'ctx_bitlen_1' [82]  (0 ns)
	'add' operation ('tmp_5', sha256_impl.c:95) [94]  (2.55 ns)
	'select' operation ('tmp_5_ctx_bitlen_1', sha256_impl.c:95) [95]  (1.37 ns)
	'store' operation (sha256_impl.c:95) of variable 'tmp_5_ctx_bitlen_1', sha256_impl.c:95 on local variable 'ctx_bitlen_1' [98]  (1.77 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
