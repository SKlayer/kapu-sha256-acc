// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "sha256_update.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic sha256_update::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic sha256_update::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> sha256_update::ap_ST_fsm_state1 = "1";
const sc_lv<5> sha256_update::ap_ST_fsm_state2 = "10";
const sc_lv<5> sha256_update::ap_ST_fsm_state3 = "100";
const sc_lv<5> sha256_update::ap_ST_fsm_state4 = "1000";
const sc_lv<5> sha256_update::ap_ST_fsm_state5 = "10000";
const sc_lv<32> sha256_update::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> sha256_update::ap_const_lv32_1 = "1";
const sc_lv<1> sha256_update::ap_const_lv1_0 = "0";
const sc_lv<32> sha256_update::ap_const_lv32_2 = "10";
const sc_lv<32> sha256_update::ap_const_lv32_3 = "11";
const sc_lv<7> sha256_update::ap_const_lv7_0 = "0000000";
const sc_lv<32> sha256_update::ap_const_lv32_4 = "100";
const sc_lv<1> sha256_update::ap_const_lv1_1 = "1";
const bool sha256_update::ap_const_boolean_0 = false;
const sc_lv<7> sha256_update::ap_const_lv7_1 = "1";
const sc_lv<32> sha256_update::ap_const_lv32_40 = "1000000";
const sc_lv<32> sha256_update::ap_const_lv32_FFFFFDFF = "11111111111111111111110111111111";
const sc_lv<32> sha256_update::ap_const_lv32_200 = "1000000000";
const bool sha256_update::ap_const_boolean_1 = true;

sha256_update::sha256_update(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_sha256_transform_fu_208 = new sha256_transform("grp_sha256_transform_fu_208");
    grp_sha256_transform_fu_208->ap_clk(ap_clk);
    grp_sha256_transform_fu_208->ap_rst(ap_rst);
    grp_sha256_transform_fu_208->ap_start(grp_sha256_transform_fu_208_ap_start);
    grp_sha256_transform_fu_208->ap_done(grp_sha256_transform_fu_208_ap_done);
    grp_sha256_transform_fu_208->ap_idle(grp_sha256_transform_fu_208_ap_idle);
    grp_sha256_transform_fu_208->ap_ready(grp_sha256_transform_fu_208_ap_ready);
    grp_sha256_transform_fu_208->ctx_state_0_read(ctx_state_load_1_reg_680);
    grp_sha256_transform_fu_208->ctx_state_1_read(ctx_state_1_load_1_reg_675);
    grp_sha256_transform_fu_208->ctx_state_2_read(ctx_state_2_load_1_reg_670);
    grp_sha256_transform_fu_208->ctx_state_3_read(ctx_state_3_load_1_reg_665);
    grp_sha256_transform_fu_208->ctx_state_4_read(ctx_state_4_load_1_reg_660);
    grp_sha256_transform_fu_208->ctx_state_5_read(ctx_state_5_load_1_reg_655);
    grp_sha256_transform_fu_208->ctx_state_6_read(ctx_state_6_load_1_reg_650);
    grp_sha256_transform_fu_208->ctx_state_7_read(ctx_state_7_load_1_reg_645);
    grp_sha256_transform_fu_208->data_address0(grp_sha256_transform_fu_208_data_address0);
    grp_sha256_transform_fu_208->data_ce0(grp_sha256_transform_fu_208_data_ce0);
    grp_sha256_transform_fu_208->data_q0(ctx_data_q0);
    grp_sha256_transform_fu_208->data_address1(grp_sha256_transform_fu_208_data_address1);
    grp_sha256_transform_fu_208->data_ce1(grp_sha256_transform_fu_208_data_ce1);
    grp_sha256_transform_fu_208->data_q1(ctx_data_q1);
    grp_sha256_transform_fu_208->ap_return_0(grp_sha256_transform_fu_208_ap_return_0);
    grp_sha256_transform_fu_208->ap_return_1(grp_sha256_transform_fu_208_ap_return_1);
    grp_sha256_transform_fu_208->ap_return_2(grp_sha256_transform_fu_208_ap_return_2);
    grp_sha256_transform_fu_208->ap_return_3(grp_sha256_transform_fu_208_ap_return_3);
    grp_sha256_transform_fu_208->ap_return_4(grp_sha256_transform_fu_208_ap_return_4);
    grp_sha256_transform_fu_208->ap_return_5(grp_sha256_transform_fu_208_ap_return_5);
    grp_sha256_transform_fu_208->ap_return_6(grp_sha256_transform_fu_208_ap_return_6);
    grp_sha256_transform_fu_208->ap_return_7(grp_sha256_transform_fu_208_ap_return_7);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state5_on_subcall_done);
    sensitive << ( tmp_3_reg_641 );
    sensitive << ( grp_sha256_transform_fu_208_ap_done );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_328_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_328_p2 );

    SC_METHOD(thread_ap_return_0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_328_p2 );
    sensitive << ( ctx_datalen_fu_56 );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_328_p2 );
    sensitive << ( ctx_bitlen_fu_96 );

    SC_METHOD(thread_ap_return_10);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_328_p2 );
    sensitive << ( ctx_state_7_fu_60 );

    SC_METHOD(thread_ap_return_2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_328_p2 );
    sensitive << ( ctx_bitlen_1_fu_92 );

    SC_METHOD(thread_ap_return_3);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_328_p2 );
    sensitive << ( ctx_state_fu_88 );

    SC_METHOD(thread_ap_return_4);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_328_p2 );
    sensitive << ( ctx_state_1_fu_84 );

    SC_METHOD(thread_ap_return_5);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_328_p2 );
    sensitive << ( ctx_state_2_fu_80 );

    SC_METHOD(thread_ap_return_6);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_328_p2 );
    sensitive << ( ctx_state_3_fu_76 );

    SC_METHOD(thread_ap_return_7);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_328_p2 );
    sensitive << ( ctx_state_4_fu_72 );

    SC_METHOD(thread_ap_return_8);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_328_p2 );
    sensitive << ( ctx_state_5_fu_68 );

    SC_METHOD(thread_ap_return_9);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_328_p2 );
    sensitive << ( ctx_state_6_fu_64 );

    SC_METHOD(thread_ctx_data_address0);
    sensitive << ( tmp_3_reg_641 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( grp_sha256_transform_fu_208_data_address0 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_1_fu_410_p1 );

    SC_METHOD(thread_ctx_data_address1);
    sensitive << ( tmp_3_reg_641 );
    sensitive << ( grp_sha256_transform_fu_208_data_address1 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ctx_data_ce0);
    sensitive << ( tmp_3_reg_641 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( grp_sha256_transform_fu_208_data_ce0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ctx_data_ce1);
    sensitive << ( tmp_3_reg_641 );
    sensitive << ( grp_sha256_transform_fu_208_data_ce1 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ctx_data_d0);
    sensitive << ( data_q0 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ctx_data_we0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_data_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_339_p1 );

    SC_METHOD(thread_data_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_exitcond_fu_328_p2);
    sensitive << ( tmp_7_reg_623 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_cast_fu_324_p1 );

    SC_METHOD(thread_grp_sha256_transform_fu_208_ap_start);
    sensitive << ( ap_reg_grp_sha256_transform_fu_208_ap_start );

    SC_METHOD(thread_i_1_fu_333_p2);
    sensitive << ( i_reg_197 );

    SC_METHOD(thread_i_cast_fu_324_p1);
    sensitive << ( i_reg_197 );

    SC_METHOD(thread_tmp_1_fu_410_p1);
    sensitive << ( ctx_datalen_fu_56 );

    SC_METHOD(thread_tmp_2_fu_415_p2);
    sensitive << ( ctx_datalen_fu_56 );

    SC_METHOD(thread_tmp_3_fu_421_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_2_fu_415_p2 );

    SC_METHOD(thread_tmp_4_fu_469_p2);
    sensitive << ( tmp_3_reg_641 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_block_state5_on_subcall_done );
    sensitive << ( ctx_bitlen_fu_96 );

    SC_METHOD(thread_tmp_5_ctx_bitlen_1_fu_481_p3);
    sensitive << ( ctx_bitlen_1_fu_92 );
    sensitive << ( tmp_4_fu_469_p2 );
    sensitive << ( tmp_5_fu_475_p2 );

    SC_METHOD(thread_tmp_5_fu_475_p2);
    sensitive << ( ctx_bitlen_1_fu_92 );

    SC_METHOD(thread_tmp_6_fu_489_p2);
    sensitive << ( ctx_bitlen_fu_96 );

    SC_METHOD(thread_tmp_7_fu_265_p1);
    sensitive << ( len );

    SC_METHOD(thread_tmp_fu_339_p1);
    sensitive << ( i_reg_197 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_328_p2 );
    sensitive << ( tmp_3_fu_421_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_block_state5_on_subcall_done );

    ap_CS_fsm = "00001";
    ap_reg_grp_sha256_transform_fu_208_ap_start = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "sha256_update_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ctx_data_address0, "(port)ctx_data_address0");
    sc_trace(mVcdFile, ctx_data_ce0, "(port)ctx_data_ce0");
    sc_trace(mVcdFile, ctx_data_we0, "(port)ctx_data_we0");
    sc_trace(mVcdFile, ctx_data_d0, "(port)ctx_data_d0");
    sc_trace(mVcdFile, ctx_data_q0, "(port)ctx_data_q0");
    sc_trace(mVcdFile, ctx_data_address1, "(port)ctx_data_address1");
    sc_trace(mVcdFile, ctx_data_ce1, "(port)ctx_data_ce1");
    sc_trace(mVcdFile, ctx_data_q1, "(port)ctx_data_q1");
    sc_trace(mVcdFile, ctx_datalen_read, "(port)ctx_datalen_read");
    sc_trace(mVcdFile, p_read1, "(port)p_read1");
    sc_trace(mVcdFile, p_read2, "(port)p_read2");
    sc_trace(mVcdFile, p_read3, "(port)p_read3");
    sc_trace(mVcdFile, p_read4, "(port)p_read4");
    sc_trace(mVcdFile, p_read5, "(port)p_read5");
    sc_trace(mVcdFile, p_read6, "(port)p_read6");
    sc_trace(mVcdFile, p_read7, "(port)p_read7");
    sc_trace(mVcdFile, p_read8, "(port)p_read8");
    sc_trace(mVcdFile, p_read9, "(port)p_read9");
    sc_trace(mVcdFile, p_read10, "(port)p_read10");
    sc_trace(mVcdFile, data_address0, "(port)data_address0");
    sc_trace(mVcdFile, data_ce0, "(port)data_ce0");
    sc_trace(mVcdFile, data_q0, "(port)data_q0");
    sc_trace(mVcdFile, len, "(port)len");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
    sc_trace(mVcdFile, ap_return_2, "(port)ap_return_2");
    sc_trace(mVcdFile, ap_return_3, "(port)ap_return_3");
    sc_trace(mVcdFile, ap_return_4, "(port)ap_return_4");
    sc_trace(mVcdFile, ap_return_5, "(port)ap_return_5");
    sc_trace(mVcdFile, ap_return_6, "(port)ap_return_6");
    sc_trace(mVcdFile, ap_return_7, "(port)ap_return_7");
    sc_trace(mVcdFile, ap_return_8, "(port)ap_return_8");
    sc_trace(mVcdFile, ap_return_9, "(port)ap_return_9");
    sc_trace(mVcdFile, ap_return_10, "(port)ap_return_10");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, tmp_7_fu_265_p1, "tmp_7_fu_265_p1");
    sc_trace(mVcdFile, tmp_7_reg_623, "tmp_7_reg_623");
    sc_trace(mVcdFile, i_1_fu_333_p2, "i_1_fu_333_p2");
    sc_trace(mVcdFile, i_1_reg_631, "i_1_reg_631");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, exitcond_fu_328_p2, "exitcond_fu_328_p2");
    sc_trace(mVcdFile, tmp_3_fu_421_p2, "tmp_3_fu_421_p2");
    sc_trace(mVcdFile, tmp_3_reg_641, "tmp_3_reg_641");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ctx_state_7_load_1_reg_645, "ctx_state_7_load_1_reg_645");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ctx_state_6_load_1_reg_650, "ctx_state_6_load_1_reg_650");
    sc_trace(mVcdFile, ctx_state_5_load_1_reg_655, "ctx_state_5_load_1_reg_655");
    sc_trace(mVcdFile, ctx_state_4_load_1_reg_660, "ctx_state_4_load_1_reg_660");
    sc_trace(mVcdFile, ctx_state_3_load_1_reg_665, "ctx_state_3_load_1_reg_665");
    sc_trace(mVcdFile, ctx_state_2_load_1_reg_670, "ctx_state_2_load_1_reg_670");
    sc_trace(mVcdFile, ctx_state_1_load_1_reg_675, "ctx_state_1_load_1_reg_675");
    sc_trace(mVcdFile, ctx_state_load_1_reg_680, "ctx_state_load_1_reg_680");
    sc_trace(mVcdFile, grp_sha256_transform_fu_208_ap_start, "grp_sha256_transform_fu_208_ap_start");
    sc_trace(mVcdFile, grp_sha256_transform_fu_208_ap_done, "grp_sha256_transform_fu_208_ap_done");
    sc_trace(mVcdFile, grp_sha256_transform_fu_208_ap_idle, "grp_sha256_transform_fu_208_ap_idle");
    sc_trace(mVcdFile, grp_sha256_transform_fu_208_ap_ready, "grp_sha256_transform_fu_208_ap_ready");
    sc_trace(mVcdFile, grp_sha256_transform_fu_208_data_address0, "grp_sha256_transform_fu_208_data_address0");
    sc_trace(mVcdFile, grp_sha256_transform_fu_208_data_ce0, "grp_sha256_transform_fu_208_data_ce0");
    sc_trace(mVcdFile, grp_sha256_transform_fu_208_data_address1, "grp_sha256_transform_fu_208_data_address1");
    sc_trace(mVcdFile, grp_sha256_transform_fu_208_data_ce1, "grp_sha256_transform_fu_208_data_ce1");
    sc_trace(mVcdFile, grp_sha256_transform_fu_208_ap_return_0, "grp_sha256_transform_fu_208_ap_return_0");
    sc_trace(mVcdFile, grp_sha256_transform_fu_208_ap_return_1, "grp_sha256_transform_fu_208_ap_return_1");
    sc_trace(mVcdFile, grp_sha256_transform_fu_208_ap_return_2, "grp_sha256_transform_fu_208_ap_return_2");
    sc_trace(mVcdFile, grp_sha256_transform_fu_208_ap_return_3, "grp_sha256_transform_fu_208_ap_return_3");
    sc_trace(mVcdFile, grp_sha256_transform_fu_208_ap_return_4, "grp_sha256_transform_fu_208_ap_return_4");
    sc_trace(mVcdFile, grp_sha256_transform_fu_208_ap_return_5, "grp_sha256_transform_fu_208_ap_return_5");
    sc_trace(mVcdFile, grp_sha256_transform_fu_208_ap_return_6, "grp_sha256_transform_fu_208_ap_return_6");
    sc_trace(mVcdFile, grp_sha256_transform_fu_208_ap_return_7, "grp_sha256_transform_fu_208_ap_return_7");
    sc_trace(mVcdFile, i_reg_197, "i_reg_197");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_block_state5_on_subcall_done, "ap_block_state5_on_subcall_done");
    sc_trace(mVcdFile, ap_reg_grp_sha256_transform_fu_208_ap_start, "ap_reg_grp_sha256_transform_fu_208_ap_start");
    sc_trace(mVcdFile, tmp_fu_339_p1, "tmp_fu_339_p1");
    sc_trace(mVcdFile, tmp_1_fu_410_p1, "tmp_1_fu_410_p1");
    sc_trace(mVcdFile, ctx_datalen_fu_56, "ctx_datalen_fu_56");
    sc_trace(mVcdFile, tmp_2_fu_415_p2, "tmp_2_fu_415_p2");
    sc_trace(mVcdFile, ctx_state_7_fu_60, "ctx_state_7_fu_60");
    sc_trace(mVcdFile, ctx_state_6_fu_64, "ctx_state_6_fu_64");
    sc_trace(mVcdFile, ctx_state_5_fu_68, "ctx_state_5_fu_68");
    sc_trace(mVcdFile, ctx_state_4_fu_72, "ctx_state_4_fu_72");
    sc_trace(mVcdFile, ctx_state_3_fu_76, "ctx_state_3_fu_76");
    sc_trace(mVcdFile, ctx_state_2_fu_80, "ctx_state_2_fu_80");
    sc_trace(mVcdFile, ctx_state_1_fu_84, "ctx_state_1_fu_84");
    sc_trace(mVcdFile, ctx_state_fu_88, "ctx_state_fu_88");
    sc_trace(mVcdFile, ctx_bitlen_1_fu_92, "ctx_bitlen_1_fu_92");
    sc_trace(mVcdFile, tmp_5_ctx_bitlen_1_fu_481_p3, "tmp_5_ctx_bitlen_1_fu_481_p3");
    sc_trace(mVcdFile, ctx_bitlen_fu_96, "ctx_bitlen_fu_96");
    sc_trace(mVcdFile, tmp_6_fu_489_p2, "tmp_6_fu_489_p2");
    sc_trace(mVcdFile, i_cast_fu_324_p1, "i_cast_fu_324_p1");
    sc_trace(mVcdFile, tmp_4_fu_469_p2, "tmp_4_fu_469_p2");
    sc_trace(mVcdFile, tmp_5_fu_475_p2, "tmp_5_fu_475_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

sha256_update::~sha256_update() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete grp_sha256_transform_fu_208;
}

void sha256_update::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_grp_sha256_transform_fu_208_ap_start = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
            ap_reg_grp_sha256_transform_fu_208_ap_start = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_sha256_transform_fu_208_ap_ready.read())) {
            ap_reg_grp_sha256_transform_fu_208_ap_start = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(tmp_3_reg_641.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0))) {
        ctx_bitlen_1_fu_92 = tmp_5_ctx_bitlen_1_fu_481_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        ctx_bitlen_1_fu_92 = p_read2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(tmp_3_reg_641.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0))) {
        ctx_bitlen_fu_96 = tmp_6_fu_489_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        ctx_bitlen_fu_96 = p_read1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ctx_datalen_fu_56 = ap_const_lv32_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_3_fu_421_p2.read()))) {
        ctx_datalen_fu_56 = tmp_2_fu_415_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        ctx_datalen_fu_56 = ctx_datalen_read.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(tmp_3_reg_641.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0))) {
        ctx_state_1_fu_84 = grp_sha256_transform_fu_208_ap_return_1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        ctx_state_1_fu_84 = p_read4.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(tmp_3_reg_641.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0))) {
        ctx_state_2_fu_80 = grp_sha256_transform_fu_208_ap_return_2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        ctx_state_2_fu_80 = p_read5.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(tmp_3_reg_641.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0))) {
        ctx_state_3_fu_76 = grp_sha256_transform_fu_208_ap_return_3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        ctx_state_3_fu_76 = p_read6.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(tmp_3_reg_641.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0))) {
        ctx_state_4_fu_72 = grp_sha256_transform_fu_208_ap_return_4.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        ctx_state_4_fu_72 = p_read7.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(tmp_3_reg_641.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0))) {
        ctx_state_5_fu_68 = grp_sha256_transform_fu_208_ap_return_5.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        ctx_state_5_fu_68 = p_read8.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(tmp_3_reg_641.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0))) {
        ctx_state_6_fu_64 = grp_sha256_transform_fu_208_ap_return_6.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        ctx_state_6_fu_64 = p_read9.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(tmp_3_reg_641.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0))) {
        ctx_state_7_fu_60 = grp_sha256_transform_fu_208_ap_return_7.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        ctx_state_7_fu_60 = p_read10.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(tmp_3_reg_641.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0))) {
        ctx_state_fu_88 = grp_sha256_transform_fu_208_ap_return_0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        ctx_state_fu_88 = p_read3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0))) {
        i_reg_197 = i_1_reg_631.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_197 = ap_const_lv7_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ctx_state_1_load_1_reg_675 = ctx_state_1_fu_84.read();
        ctx_state_2_load_1_reg_670 = ctx_state_2_fu_80.read();
        ctx_state_3_load_1_reg_665 = ctx_state_3_fu_76.read();
        ctx_state_4_load_1_reg_660 = ctx_state_4_fu_72.read();
        ctx_state_5_load_1_reg_655 = ctx_state_5_fu_68.read();
        ctx_state_6_load_1_reg_650 = ctx_state_6_fu_64.read();
        ctx_state_7_load_1_reg_645 = ctx_state_7_fu_60.read();
        ctx_state_load_1_reg_680 = ctx_state_fu_88.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_1_reg_631 = i_1_fu_333_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        tmp_3_reg_641 = tmp_3_fu_421_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        tmp_7_reg_623 = tmp_7_fu_265_p1.read();
    }
}

void sha256_update::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void sha256_update::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void sha256_update::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void sha256_update::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void sha256_update::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void sha256_update::thread_ap_block_state5_on_subcall_done() {
    ap_block_state5_on_subcall_done = (esl_seteq<1,1,1>(ap_const_logic_0, grp_sha256_transform_fu_208_ap_done.read()) && esl_seteq<1,1,1>(tmp_3_reg_641.read(), ap_const_lv1_1));
}

void sha256_update::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(exitcond_fu_328_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void sha256_update::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void sha256_update::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_328_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void sha256_update::thread_ap_return_0() {
    ap_return_0 = ctx_datalen_fu_56.read();
}

void sha256_update::thread_ap_return_1() {
    ap_return_1 = ctx_bitlen_fu_96.read();
}

void sha256_update::thread_ap_return_10() {
    ap_return_10 = ctx_state_7_fu_60.read();
}

void sha256_update::thread_ap_return_2() {
    ap_return_2 = ctx_bitlen_1_fu_92.read();
}

void sha256_update::thread_ap_return_3() {
    ap_return_3 = ctx_state_fu_88.read();
}

void sha256_update::thread_ap_return_4() {
    ap_return_4 = ctx_state_1_fu_84.read();
}

void sha256_update::thread_ap_return_5() {
    ap_return_5 = ctx_state_2_fu_80.read();
}

void sha256_update::thread_ap_return_6() {
    ap_return_6 = ctx_state_3_fu_76.read();
}

void sha256_update::thread_ap_return_7() {
    ap_return_7 = ctx_state_4_fu_72.read();
}

void sha256_update::thread_ap_return_8() {
    ap_return_8 = ctx_state_5_fu_68.read();
}

void sha256_update::thread_ap_return_9() {
    ap_return_9 = ctx_state_6_fu_64.read();
}

void sha256_update::thread_ctx_data_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        ctx_data_address0 =  (sc_lv<6>) (tmp_1_fu_410_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(tmp_3_reg_641.read(), ap_const_lv1_1))) {
        ctx_data_address0 = grp_sha256_transform_fu_208_data_address0.read();
    } else {
        ctx_data_address0 = "XXXXXX";
    }
}

void sha256_update::thread_ctx_data_address1() {
    ctx_data_address1 = grp_sha256_transform_fu_208_data_address1.read();
}

void sha256_update::thread_ctx_data_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        ctx_data_ce0 = ap_const_logic_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(tmp_3_reg_641.read(), ap_const_lv1_1))) {
        ctx_data_ce0 = grp_sha256_transform_fu_208_data_ce0.read();
    } else {
        ctx_data_ce0 = ap_const_logic_0;
    }
}

void sha256_update::thread_ctx_data_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(tmp_3_reg_641.read(), ap_const_lv1_1))) {
        ctx_data_ce1 = grp_sha256_transform_fu_208_data_ce1.read();
    } else {
        ctx_data_ce1 = ap_const_logic_0;
    }
}

void sha256_update::thread_ctx_data_d0() {
    ctx_data_d0 = data_q0.read();
}

void sha256_update::thread_ctx_data_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        ctx_data_we0 = ap_const_logic_1;
    } else {
        ctx_data_we0 = ap_const_logic_0;
    }
}

void sha256_update::thread_data_address0() {
    data_address0 =  (sc_lv<6>) (tmp_fu_339_p1.read());
}

void sha256_update::thread_data_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        data_ce0 = ap_const_logic_1;
    } else {
        data_ce0 = ap_const_logic_0;
    }
}

void sha256_update::thread_exitcond_fu_328_p2() {
    exitcond_fu_328_p2 = (!i_cast_fu_324_p1.read().is_01() || !tmp_7_reg_623.read().is_01())? sc_lv<1>(): sc_lv<1>(i_cast_fu_324_p1.read() == tmp_7_reg_623.read());
}

void sha256_update::thread_grp_sha256_transform_fu_208_ap_start() {
    grp_sha256_transform_fu_208_ap_start = ap_reg_grp_sha256_transform_fu_208_ap_start.read();
}

void sha256_update::thread_i_1_fu_333_p2() {
    i_1_fu_333_p2 = (!i_reg_197.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(i_reg_197.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void sha256_update::thread_i_cast_fu_324_p1() {
    i_cast_fu_324_p1 = esl_zext<8,7>(i_reg_197.read());
}

void sha256_update::thread_tmp_1_fu_410_p1() {
    tmp_1_fu_410_p1 = esl_zext<64,32>(ctx_datalen_fu_56.read());
}

void sha256_update::thread_tmp_2_fu_415_p2() {
    tmp_2_fu_415_p2 = (!ctx_datalen_fu_56.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(ctx_datalen_fu_56.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void sha256_update::thread_tmp_3_fu_421_p2() {
    tmp_3_fu_421_p2 = (!tmp_2_fu_415_p2.read().is_01() || !ap_const_lv32_40.is_01())? sc_lv<1>(): sc_lv<1>(tmp_2_fu_415_p2.read() == ap_const_lv32_40);
}

void sha256_update::thread_tmp_4_fu_469_p2() {
    tmp_4_fu_469_p2 = (!ctx_bitlen_fu_96.read().is_01() || !ap_const_lv32_FFFFFDFF.is_01())? sc_lv<1>(): (sc_biguint<32>(ctx_bitlen_fu_96.read()) > sc_biguint<32>(ap_const_lv32_FFFFFDFF));
}

void sha256_update::thread_tmp_5_ctx_bitlen_1_fu_481_p3() {
    tmp_5_ctx_bitlen_1_fu_481_p3 = (!tmp_4_fu_469_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_4_fu_469_p2.read()[0].to_bool())? tmp_5_fu_475_p2.read(): ctx_bitlen_1_fu_92.read());
}

void sha256_update::thread_tmp_5_fu_475_p2() {
    tmp_5_fu_475_p2 = (!ctx_bitlen_1_fu_92.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(ctx_bitlen_1_fu_92.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void sha256_update::thread_tmp_6_fu_489_p2() {
    tmp_6_fu_489_p2 = (!ctx_bitlen_fu_96.read().is_01() || !ap_const_lv32_200.is_01())? sc_lv<32>(): (sc_biguint<32>(ctx_bitlen_fu_96.read()) + sc_biguint<32>(ap_const_lv32_200));
}

void sha256_update::thread_tmp_7_fu_265_p1() {
    tmp_7_fu_265_p1 = len.read().range(8-1, 0);
}

void sha256_update::thread_tmp_fu_339_p1() {
    tmp_fu_339_p1 = esl_zext<64,7>(i_reg_197.read());
}

void sha256_update::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond_fu_328_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_3_fu_421_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_block_state5_on_subcall_done.read(), ap_const_boolean_0))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<5>) ("XXXXX");
            break;
    }
}

}

